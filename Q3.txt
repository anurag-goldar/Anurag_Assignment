import heapq
from collections import defaultdict

class HuffmanNode:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_frequency_table(text):
    frequency_table = defaultdict(int)
    for char in text:
        frequency_table[char] += 1
    return frequency_table

def build_huffman_tree(frequency_table):
    heap = []
    for char, freq in frequency_table.items():
        node = HuffmanNode(char, freq)
        heapq.heappush(heap, node)

    while len(heap) > 1:
        left_child = heapq.heappop(heap)
        right_child = heapq.heappop(heap)
        parent_freq = left_child.freq + right_child.freq
        parent = HuffmanNode(None, parent_freq)
        parent.left = left_child
        parent.right = right_child
        heapq.heappush(heap, parent)

    return heap[0]

def build_code_table(huffman_tree):
    code_table = {}

    def traverse_tree(node, code):
        if node.char is not None:
            code_table[node.char] = code
        else:
            traverse_tree(node.left, code + "0")
            traverse_tree(node.right, code + "1")

    traverse_tree(huffman_tree, "")

    return code_table

def encode_text(text, code_table):
    encoded_text = ""
    for char in text:
        encoded_text += code_table[char]
    return encoded_text

def decode_text(encoded_text, huffman_tree):
    decoded_text = ""
    current_node = huffman_tree

    for bit in encoded_text:
        if bit == "0":
            current_node = current_node.left
        else:
            current_node = current_node.right

        if current_node.char is not None:
            decoded_text += current_node.char
            current_node = huffman_tree

    return decoded_text

# Test the algorithm
text = "Huffman coding is a data compression algorithm."
frequency_table = build_frequency_table(text)
huffman_tree = build_huffman_tree(frequency_table)
code_table = build_code_table(huffman_tree)

encoded_text = encode_text(text, code_table)
print("Encoded text:", encoded_text)

decoded_text = decode_text(encoded_text, huffman_tree)
print("Decoded text:", decoded_text)
