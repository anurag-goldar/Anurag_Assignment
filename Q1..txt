import numpy as np

def strassen_matrix_multiplication(A, B):
    n = A.shape[0]

    if n == 1:
        return A * B

    # Split matrices into quadrants
    mid = n // 2
    A11, A12, A21, A22 = A[:mid, :mid], A[:mid, mid:], A[mid:, :mid], A[mid:, mid:]
    B11, B12, B21, B22 = B[:mid, :mid], B[:mid, mid:], B[mid:, :mid], B[mid:, mid:]

    # Recursive steps
    P1 = strassen_matrix_multiplication(A11 + A22, B11 + B22)
    P2 = strassen_matrix_multiplication(A21 + A22, B11)
    P3 = strassen_matrix_multiplication(A11, B12 - B22)
    P4 = strassen_matrix_multiplication(A22, B21 - B11)
    P5 = strassen_matrix_multiplication(A11 + A12, B22)
    P6 = strassen_matrix_multiplication(A21 - A11, B11 + B12)
    P7 = strassen_matrix_multiplication(A12 - A22, B21 + B22)

    # Compute the quadrants of the result matrix
    C11 = P1 + P4 - P5 + P7
    C12 = P3 + P5
    C21 = P2 + P4
    C22 = P1 - P2 + P3 + P6

    # Combine the quadrants into a single matrix
    C = np.zeros((n, n))
    C[:mid, :mid] = C11
    C[:mid, mid:] = C12
    C[mid:, :mid] = C21
    C[mid:, mid:] = C22

    return C

# Test the algorithm
A = np.array([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [9, 10, 11, 12],
              [13, 14, 15, 16]])

B = np.array([[17, 18, 19, 20],
              [21, 22, 23, 24],
              [25, 26, 27, 28],
              [29, 30, 31, 32]])

C = strassen_matrix_multiplication(A, B)
print("Result:")
print(C)
